=>REACT:

npx create-react-app myapp=>for creating new react app with name myapp
npm start=>in my app use for starting the development server(like liveserver)

=>BUNDLE:

u shouldnt send all js files to server when u put website on production.use command to will create a
bundle
All our js files=>transpile=>index.html and bundle.js
Transpiling is a specific term for taking source code written in one language and transforming into
another language that has a similar level of abstraction.

=>BUILDING REACT APP FROM SCRATCH

Now delete all files in src and we ll build react app froms scratch:
First thing index.js is required for the npm start.All our logic is in index.js.
We have index.html file in public folder that contains html and logic is in index.js
if we empty our index.js then blank screen will appear.

=>WHATS INSIDE IN INDEX.JS?

import React from 'react'; >Every time u build u have to include this
import ReactDOM from 'react-dom'; >to connect out index.js and index.html file (How to read DOM and cnnect with index.html)

Component:Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.

Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.
ReactDOM.render(app,document.getElementById('root')) if u pass like this it will think that app is functions
and will give an error so we have to write <app/> now it will think it as a component.
// Before
import { render } from 'react-dom';
const container = document.getElementById('app');
render(<App tab="home" />, container);
// After
import { createRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = createRoot(container); // createRoot(container!) if you use TypeScript
root.render(<App tab="home" />);
before one working but throwing error as it is not suported in react18
When we return html in component it is not html it is jsx.At backend it is converted into html 
to be rendered.

=>Behind the scenes:
As we know in component when we return something it is .jsx not html so how it is rendered??
it is shown in code that we return it in html format react convert it into .jsx
We cant return more than 1 statement in components like:
<h1></h1>
<h2></h2>
Solution?
Use React.Fragment tags
<React.Fragment>
<h1></h1>
<h2></h2>
</React.Fragment>
or shortly:
<>             
<h1>Hello World</h1>
<h2>Hello Pakistan</h2>
</>
now our div will only contain h1 and h2 no extra div as there was in case of
<div>
<h1></h1>
<h2></h2>
</div>

=>Working with Components:

Make js file make a function or class and export it 
import it where u want to use it.

=>DEFAULT EXPORT VS NAMED EXPORT:

default export is allowed once per file but if we have multiple funcs or classes then we can use
named export.Functionality is same but syntax is different.
Default: 
export default App
import App from ./components/file.js
Named:
export {App}
import {App} from ./component/file.js
Combination:
import App,{App2,App3} from ...........
where App2,3 can be class or function component 

=>Class based Component

 must extend Component from React then override its render function with your return 
statement.all other same as function components i.e export and import

=>Styling:

Inline:
let styles={
    header:{
        color:"brown"
    },
    paragraph:{
        color:"yellow"

    }
}
and use styles.header in style tag of html etc

Outer Css:
make a .css file in public folder add styling include it in html  and add classname same as of
in sylesheet where u want to apply that styling.
In CSS:
.dateheading{
    color:blueviolet;
    font-size: larger;
}
In js:
 <h2 className="dateheading">Date is {CalculateDate()}</h2>

Internal Css:
make a folder of style in src add a file of css in it import it in index.js
Then when u will inspect the webpage it will be like
<style>
all ur styling will be in there
</style>

=>Events:

There are many events u can use which u can find on react docs.
example onClick
onChange event can be used when we change something like in input type when we type or delete something
<input onChange={this.funcname}/>
funcname()
{
    console.log('gg')
}
What if we want to get value in the input:
funcname(event)
{
    console.log(event.target.value)   =>event is the synthetic event containing different values
    and the value user type will be in target and then value
}

Difference bw this.funcname and this.funcname()?
first one will not be executed until any change is done.like its a while loop
while the 2nd one will be execute one time and then will fired at any change its like do while

What if we want to send parameters too?
we can use a callback function in which we will send event as an argument
onChange={(e)=>this.funcname(e,'ron')}
where e us event

What if we want to call another function in funcname
funcname(event)
{
    this.hello() =>it will throw an error as it ill consider this inside funcname

}
so what can we do is to use callback func as stated earlier it will define that we r talking abt class
not function i.e will give error if we use simple OnClick={this.funcname}

=>State

In class based component u have default state but in func based component u dont have default.
But u can use hooks
State is just like an object having tons of properties that can be string,integer etc.It acts as a tiny
database.
state{
    name:'ali'
}
in onchange for example:
    state={
        keyword:'name'
    }
    this.setState({
        keyword:event.target.value
    })
    Why we would not simply write this.state.keyword=event.target.value?
    Why we r using this.setstate?
    Its because set state is built in function that not only update the changed value
    but also re-render it for confirming
    we r printing {this.state.keyword} in render and we can see it render after every change 

    Another use can be a counter this.setstate({count:this.state.count+1})
    or u can use:
        this.setState((state,props)=>({
        count:state.count + 1               //state will give the previous state and it is returning                                                 //returning new state with changed values and previous                                                /ones
        }))                                 //the new state with changed and previous values

=>props

How to send data to other component?
Use state and props as in code
Props is short form of proerties.Props is short for properties. You give properties to components. 
Just like your parents gave you your eye color your components in React give properties to their children. Everything flows downhill.
Children components do not give props back to their parents.
You can use JSON as ur fake db store dictionary type daata into it.
like
[
    {
        "id":1
        "title":"Heading"
        "Feed":"Description"
    }
]
then import in file where u wanna use it
import JSON from ./data.JSON
then u can pass this data to children
where u r rendering it
like
<><Children news={JSON}/></>
and in children if its one item then simply print it
<div>this.props.news</div>=>if its class
for function props will be in the parameter and prop.news will be used
In case of array use this.prop.news.map((item)=>(
    item.title etc
)) 
maybe in future we have a lot of properties like name age etc and we dont wanna use them then we will simply
write {blood_group} instead of props  in functions
const newlist=(props)=>{} x
const newlist=({blood_group,color})=>{} OK

