=>REACT:

npx create-react-app myapp=>for creating new react app with name myapp
npm start=>in my app use for starting the development server(like liveserver)

=>BUNDLE:

u shouldnt send all js files to server when u put website on production.use command to will create a
bundle
All our js files=>transpile=>index.html and bundle.js
Transpiling is a specific term for taking source code written in one language and transforming into
another language that has a similar level of abstraction.

=>BUILDING REACT APP FROM SCRATCH

Now delete all files in src and we ll build react app froms scratch:
First thing index.js is required for the npm start.All our logic is in index.js.
We have index.html file in public folder that contains html and logic is in index.js
if we empty our index.js then blank screen will appear.

=>WHATS INSIDE IN INDEX.JS?

import React from 'react'; >Every time u build u have to include this
import ReactDOM from 'react-dom'; >to connect out index.js and index.html file (How to read DOM and cnnect with index.html)

Component:Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.

Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.
ReactDOM.render(app,document.getElementById('root')) if u pass like this it will think that app is functions
and will give an error so we have to write <app/> now it will think it as a component.
// Before
import { render } from 'react-dom';
const container = document.getElementById('app');
render(<App tab="home" />, container);
// After
import { createRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = createRoot(container); // createRoot(container!) if you use TypeScript
root.render(<App tab="home" />);
before one working but throwing error as it is not suported in react18
When we return html in component it is not html it is jsx.At backend it is converted into html 
to be rendered.

=>Behind the scenes:
As we know in component when we return something it is .jsx not html so how it is rendered??
it is shown in code that we return it in html format react convert it into .jsx
We cant return more than 1 statement in components like:
<h1></h1>
<h2></h2>
Solution?
Use React.Fragment tags
<React.Fragment>
<h1></h1>
<h2></h2>
</React.Fragment>
or shortly:
<>             
<h1>Hello World</h1>
<h2>Hello Pakistan</h2>
</>
now our div will only contain h1 and h2 no extra div as there was in case of
<div>
<h1></h1>
<h2></h2>
</div>

=>Working with Components:

Make js file make a function or class and export it 
import it where u want to use it.

=>DEFAULT EXPORT VS NAMED EXPORT:

default export is allowed once per file but if we have multiple funcs or classes then we can use
named export.Functionality is same but syntax is different.
Default: 
export default App
import App from ./components/file.js
Named:
export {App}
import {App} from ./component/file.js
Combination:
import App,{App2,App3} from ...........
where App2,3 can be class or function component 

=>Class based Component

 must extend Component from React then override its render function with your return 
statement.all other same as function components i.e export and import

=>Styling:

Inline:
let styles={
    header:{
        color:"brown"
    },
    paragraph:{
        color:"yellow"

    }
}
and use styles.header in style tag of html etc

Outer Css:
make a .css file in public folder add styling include it in html  and add classname same as of
in sylesheet where u want to apply that styling.
In CSS:
.dateheading{
    color:blueviolet;
    font-size: larger;
}
In js:
 <h2 className="dateheading">Date is {CalculateDate()}</h2>

Internal Css:
make a folder of style in src add a file of css in it import it in index.js
Then when u will inspect the webpage it will be like
<style>
all ur styling will be in there
</style>

=>Events:

There are many events u can use which u can find on react docs.
example onClick
onChange event can be used when we change something like in input type when we type or delete something
<input onChange={this.funcname}/>
funcname()
{
    console.log('gg')
}
What if we want to get value in the input:
funcname(event)
{
    console.log(event.target.value)   =>event is the synthetic event containing different values
    and the value user type will be in target and then value
}

Difference bw this.funcname and this.funcname()?
first one will not be executed until any change is done.like its a while loop
while the 2nd one will be execute one time and then will fired at any change its like do while

What if we want to send parameters too?
we can use a callback function in which we will send event as an argument
onChange={(e)=>this.funcname(e,'ron')}
where e us event

What if we want to call another function in funcname
funcname(event)
{
    this.hello() =>it will throw an error as it ill consider this inside funcname

}
so what can we do is to use callback func as stated earlier it will define that we r talking abt class
not function i.e will give error if we use simple OnClick={this.funcname}

=>State

In class based component u have default state but in func based component u dont have default.
But u can use hooks
State is just like an object having tons of properties that can be string,integer etc.It acts as a tiny
database.
state{
    name:'ali'
}
in onchange for example:
    state={
        keyword:'name'
    }
    this.setState({
        keyword:event.target.value
    })
    Why we would not simply write this.state.keyword=event.target.value?
    Why we r using this.setstate?
    Its because set state is built in function that not only update the changed value
    but also re-render it for confirming
    we r printing {this.state.keyword} in render and we can see it render after every change 

    Another use can be a counter this.setstate({count:this.state.count+1})
    or u can use:
        this.setState((state,props)=>({
        count:state.count + 1               //state will give the previous state and it is returning                                                 //returning new state with changed values and previous                                                /ones
        }))                                 //the new state with changed and previous values


    TIP for state
    state={
        name:"Usman"
        age:32
    }
    const {name,age}=this.state
    now we dont need to write this.state.name every time we ll just write {name}

=>props

How to send data to other component?
Use state and props as in code
Props is short form of proerties.Props is short for properties. You give properties to components. 
Just like your parents gave you your eye color your components in React give properties to their children. Everything flows downhill.
Children components do not give props back to their parents.
You can use JSON as ur fake db store dictionary type daata into it.
like
[
    {
        "id":1
        "title":"Heading"
        "Feed":"Description"
    }
]
then import in file where u wanna use it
import JSON from ./data.JSON
then u can pass this data to children
where u r rendering it
like
<><Children news={JSON}/></>
and in children if its one item then simply print it
<div>this.props.news</div>=>if its class
for function props will be in the parameter and prop.news will be used
In case of array use this.prop.news.map((item)=>(
    item.title etc
)) 
maybe in future we have a lot of properties like name age etc and we dont wanna use them then we will simply
write {blood_group} instead of props  in functions
const newlist=(props)=>{} x
const newlist=({blood_group,color})=>{} OK

=>Children

props.children is used when we want to send some jsx from parent to children

=>Change style with state
We can use ternary
bool ? (if true):(if false)
like:
string a= 1===1 ? 'good':'bad';
or style={{background:check ? 'red':'false'}}=>bg color willbe red if check is true and so on
U can even decide class name at run time

We can also send function as a property like i did in newsagency react app

---------------------------------------------All done till video 015 react basics------------------------
From React Docs now we will create clock using React in timer react app

Life Cycle:
Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.
The three phases are: Mounting, Updating, and Unmounting.

1)Mounting:
Mounting means putting elements into the DOM.

React has four built-in methods that gets called, in this order, when mounting a component:

constructor()
getDerivedStateFromProps()
render()                            =>Order is same these func will call in this order
componentDidMount()
componentWillUnmount()

=>Constructor:
The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.
=>render:
The render() method is required, and is the method that actually outputs the html to the DOM.
=>componentDidMount:
The componentDidMount() method runs after the component output has been rendered to the DOM
=>componentWillUnmount:
componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method.

=>Call back Function:Callback function is passed to another function.It helps to control the sequence of
function example u want to do some calculation then print the answer and calculation will take some time
and result will be displayed before calculation then it will cause a problem.
performcalculation()->this function has set timeout of interval 5sec
display()->this function has set timeout of 1sec
now if we call both of these function then first display will be called and calculation will be called
after 5 s.
To reoslve that we will pass display as a callback function to calculation
calculation(callback){
    //set timeout
    callback()
}
calculation(display)
=>Now display will be called after 5 second when calculation is done and whole process will take 6 seconds
It is mostly used in asynchronous methods like this.

=>Diff bw normal function and arrow function?
Arrow funciton are used for shorthand for functions
a=(a,b)=>a+b
The handling of this is also different in arrow functions compared to regular functions.

In short, with arrow functions there are no binding of this.

In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.
With arrow functions the this keyword always represents the object that defined the arrow function.
As in timer example we can see we r excessing this.state.time if we ll not use arrow while calling or defining
then it will give that time is undefineds

=>Updating LifeCycle:
An update can be caused by changes to props or state
A component can'nt change its own props but can change the props of its children
1) static getDerivedStateFromProps()
2)shouldComponentUpdate()
3)render()
4)getSnapshotBeforeUpdate()
5)componentDidUpdate()
1)shouldComponentUpdate=>It returns boolean.It will be called when we want to update something.
It will be called bw getDerivedStateFromProps and render.If false then it will not call Render.Otherwise
it will call render.
shouldComponentUpdate(nextProps,nextState) =>nextstate tell us the state we changed during setState
    if(nextState.name=='Ron')              =>remember state is not updated yet it will updated when shouldComponentUpdate retun true                                           =>
    {
        return false
    }
    return true
}
All other read from Docs they r not important

=>Hooks:
We cant access state and other react feature like lifecycles in functions.So hooks let u use state and other
react features without writing a class

A hook is a function provided by react that lets u hook into react features from yout functional component.

1)UseState:

const [name,setName]=useState('Usman')
useState("some Initial value give us an array having value at first index and function at 2nd index")
What if we have more than one values to deal with as in classes.
1)You can use multilple use States like:
const [name,setName]=useState('Usman')
const [surname,SetSurname]=useState('Arshad')
but that can be handy u can do this way too:
const [state,setState]=useState({
    name:'Usman',
    surname:'Arshad'
})
Watch Coding on who to deal with it:

Problem:If we change only name in setState,surname will not be copied in this state,now we'll only
have name in our state. i.e UseState does not automatically merge updated state
How to deal it?
1)use ...state it will copy the current state here then after this change(overwrite) the value u want.
2)use useReducer(will study later)

2)UseEffect:
The Effect Hook lets you perform side effects in function components.If you’re familiar with React class lifecycle methods, you can think of 
useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.
By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates
By default, it runs both after the first render and after every update.
But we can customize it.
useEffect(()=>{func},[array])
=>Pass dependencies in this array
1)No dependancy Passed:
useEffect({func}) then it will be called at first render then at every update of any state(useState)
2)An empty array:
useEffect({func},[]) then it will be called at only first render.
3)State and props:
useEffect({func},[state,props])=>this function will be called at time of initial rendering and whenever
the state or props passed in array is updated
Some effects require cleanup to reduce memory leaks.

Timeouts, subscriptions, event listeners, and other effects that are no longer needed should be disposed.

We do this by including a return function at the end of the useEffect Hook.
Return will act as a unmout in class when component will unmounted return will be called.

=>Use Callback:

The React useCallback Hook returns a memoized callback function.Think of memoization as caching a value so that it does not need to be recalculated.
This allows us to isolate resource intensive functions so that they will not automatically run on every render.
The useCallback Hook only runs when one of its dependencies update.

useCallback(func,dependencies)

Problem:How to avoid re-rendering component until its props changed?
Solution:For values use memo and for functions use callbacks
As in code if we r not using memo and callback then anystate updated after initial render will lead to 
all the 5 components to re-render
now for avoiding values to re-render we ll use:
export default memo(Title) now it will not re-render until its props changed

After using memo we can see when we increment count or age both the buttons i.e functions also re-rendered
Now we ll use callback
incrementcount=usecallback(()=>{u=>u+1},[])
but we still have to use export default memo(Countbtn)

=>UseRef(Hook) or createRef(in class)

1)The useRef Hook allows you to persist values between renders.
If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render.
To avoid this, we can use the useRef Hook.(App1.js)
2)It can be used to store a mutable value that does not cause a re-render when updated.
If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render.
To avoid this, we can use the useRef Hook.(App1.js)
3)It can be used to access a DOM element directly.
In general, we want to let React handle all DOM manipulation.
But there are some instances where useRef can be used without causing issues.
In React, we can add a ref attribute to an element to access it directly in the DOM.
If you pass a ref object to React with <div ref={myRef} />, React will set its .current property to the corresponding DOM node whenever that node changes.
See App.js for this.